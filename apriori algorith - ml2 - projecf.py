#!/usr/bin/env python
# coding: utf-8

# In[1]:


###Problem Definition

#Perform Apriori Algorithm on a simple dataset and mine association rules that may exist betweeen itemsets with metric set to confidence & lift.

###Tasks to be performed

#Importing Required Libraries
#Creating a simple dataset
#Transaction Encoding
#Understanding Apriori Algorithm
#Applying Apriori Algorithm
#Mining Association Rules


# In[6]:


get_ipython().system('pip install mlxtend')


# In[11]:


import pandas as pd
from mlxtend.preprocessing import TransactionEncoder
from mlxtend.frequent_patterns import apriori
from mlxtend.frequent_patterns import association_rules
import warnings
warnings.filterwarnings("ignore")


# # creating a simple data set

# In[15]:


dataset = [['Milk', 'Snacks', 'Bread', 'Jam', 'Eggs', 'Banana', 'Beer', 'Diaper'],
           ['Milk','Bread','Beer', 'Diaper', 'Snacks','Banana'],
           ['Milk','Bread','Jam','Eggs','Banana'],
           ['Milk', 'Bread','Jam' 'Yogurt', 'Eggs','Banana'],
           ['Bread', 'Eggs', 'Diaper', 'Beer', 'Snacks'],
           ['Beer','Diaper','Snacks' 'Eggs','Jam']]


# # transaction encoded

# In[16]:


te = TransactionEncoder()
te_ary = te.fit(dataset).transform(dataset)
df=pd.DataFrame(te_ary,columns=te.columns_)
df.head()


# In[17]:


df.shape


# Understanding Apriori Algorithm
# 
# Apriori algorithm is a classical algorithm used in data mining. Used for finding frequent itemsets and mining association rules that may exist between different itemsets. It operates very well on a dataset containing large number of transactions. It is not only easy to understand but also to implement. The frequent itemsets generated by the Apriori Algorithm can be used to determine the association rules that may exist between different items.
# 
# There are three major components of Apriori Algorithm.They are:
# 
# 1)Support : It can be defined as the popularity of a particular item.It can be calculated as the number of transactions invloving that particular item divided by total number of transactions.
# 2)Confidence :It is the likelihood of an item Y being purchased when X was purchased.
# 2)Lift :It is the likelihood of an item Y being purchased when item X is purchased while considering the popularity of Y.
# 

# # 3. apriori algorithm

# In[18]:


frequent_itemsets = apriori(df,min_support=0.6,use_colnames=True)
frequent_itemsets


# ### from above, you can see that the result is a dataframe with support for each itemsets

# # mining association rules

# In[20]:


association_rules(frequent_itemsets, metric = "confidence", min_threshold=0.8)


# ### from above , you can see the result of association analysis showing which item is frequently purchased with other items

# In[21]:


rules = association_rules(frequent_itemsets, metric="lift",min_threshold=1.2)
rules


# In[24]:


rules[ (rules['confidence'] > 0.75) &
       (rules['lift'] > 1.2)]


# In[25]:


rules[rules['antecedents'] == {'Milk', 'Bread',}]


# ### from above , we can say that when a customer buys milk and bread together,he/she is likely to banana as well, so to increase the sales we can put these items together

# In[ ]:




